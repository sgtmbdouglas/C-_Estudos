                Explorando estruturas avanÃ§adas
    Organizando Tipos em C#
        Namespace Ã© uma forma de organizar tipos definidos no seu projeto, como classes, structs, interfaces e enums em um mesmo conjunto.
        Organizando tipos em um mesmo conjunto, podemos definir domÃ­nios especÃ­ficos em uma aplicaÃ§Ã£o, facilitando o processo de encontrar tipos ou utilizÃ¡-los em diferentes partes do sistema. Essa forma de organizaÃ§Ã£o Ã© muito utilizada em C# e atÃ© mesmo pela framework .NET.
        TambÃ©m podemos dizer ao compilador para importar todos os tipos presentes no namespace MyNamespace e deixar disponÃ­veis para acesso direto dentro desse arquivo da seguinte forma:
            using MyNamespace;
    Em C#, temos duas categorias de tipos de variÃ¡veis, os Tipos de valor e os Tipos de referÃªncia.
        Tipos de valores sÃ£o os tipos de variÃ¡veis que possuem o seu valor armazenado diretamente, ou seja, a variÃ¡vel em si Ã© aquele valor que ela representa e nÃ£o uma referÃªncia para o valor em outra parte da memÃ³ria.
        Exemplos de tipos de valores: int, float, double, char, bool.
        ğŸš¨ImportanteğŸš¨: string NÃƒO Ã‰ um tipo de valor, string Ã© um tipo de referÃªncia.
        
        Tipos de referÃªncia sÃ£o os tipos que armazenam uma referÃªncia ao seu valor e nÃ£o o valor propriamente dito, e isso tem consequÃªncias importantes. Por exemplo, duas variÃ¡veis de tipo de referÃªncia podem se referenciar a um mesmo valor armazenado na memÃ³ria.
        Exemplos de tipos de referÃªncia sÃ£o: classes, interfaces, string, Action. Isso significa que qualquer instÃ¢ncia de uma classe que criar, essa instÃ¢ncia serÃ¡ uma referÃªncia ao valor real.
    
     Estruturas tambÃ©m possuem modificadores de acesso como public, private e protected, assim como classes, e funcionam da mesma forma.

    Structs, as classes simplificadas em C#
        Structs sÃ£o estruturas de dados em C# onde Ã© possÃ­vel criar objetos de forma parecida com uma class, porÃ©m simplificada.
    
    Melhorando a legibilidade do cÃ³digo com Enum
        Enums sÃ£o estruturas de dados em C# que sÃ£o utilizadas para melhorar a legibilidade do cÃ³digo construÃ­do. VocÃª jÃ¡ deve ter se deparado com situaÃ§Ãµes em que precisamos definir apenas algumas poucas possibilidades para um determinado valor, como por exemplo uma compra com cartÃ£o que pode ser feita no CrÃ©dito ou no DÃ©bito
        VocÃª nÃ£o precisa definir os valores das constantes de uma Enum. Caso nÃ£o defina, os valores serÃ£o inteiros, comeÃ§ando de 0 e crescendo a cada constante definida na Enum.
        